// This file was autogenerated by some hot garbage in the `uniffi` crate.
// Trust me, you don't want to mess with it!

@file:Suppress("NAME_SHADOWING")

package strathweb.phi.engine;

// Common helper code.
//
// Ideally this would live in a separate .kt file where it can be unittested etc
// in isolation, and perhaps even published as a re-useable package.
//
// However, it's important that the details of how this helper code works (e.g. the
// way that different builtin types are passed across the FFI) exactly match what's
// expected by the Rust code on the other side of the interface. In practice right
// now that means coming from the exact some version of `uniffi` that was used to
// compile the Rust component. The easiest way to ensure this is to bundle the Kotlin
// helpers directly inline like we're doing here.

import com.sun.jna.Library
import com.sun.jna.IntegerType
import com.sun.jna.Native
import com.sun.jna.Pointer
import com.sun.jna.Structure
import com.sun.jna.Callback
import com.sun.jna.ptr.*
import java.nio.ByteBuffer
import java.nio.ByteOrder
import java.nio.CharBuffer
import java.nio.charset.CodingErrorAction
import java.util.concurrent.ConcurrentHashMap
import java.util.concurrent.atomic.AtomicBoolean
import java.util.concurrent.atomic.AtomicLong
import java.util.concurrent.locks.ReentrantLock
import kotlin.concurrent.withLock

// This is a helper for safely working with byte buffers returned from the Rust code.
// A rust-owned buffer is represented by its capacity, its current length, and a
// pointer to the underlying data.

@Structure.FieldOrder("capacity", "len", "data")
open class RustBuffer : Structure() {
    @JvmField var capacity: Int = 0
    @JvmField var len: Int = 0
    @JvmField var data: Pointer? = null

    class ByValue: RustBuffer(), Structure.ByValue
    class ByReference: RustBuffer(), Structure.ByReference

    companion object {
        internal fun alloc(size: Int = 0) = rustCall() { status ->
            _UniFFILib.INSTANCE.ffi_strathweb_phi_engine_rustbuffer_alloc(size, status)
        }.also {
            if(it.data == null) {
               throw RuntimeException("RustBuffer.alloc() returned null data pointer (size=${size})")
           }
        }

        internal fun create(capacity: Int, len: Int, data: Pointer?): RustBuffer.ByValue {
            var buf = RustBuffer.ByValue()
            buf.capacity = capacity
            buf.len = len
            buf.data = data
            return buf
        }

        internal fun free(buf: RustBuffer.ByValue) = rustCall() { status ->
            _UniFFILib.INSTANCE.ffi_strathweb_phi_engine_rustbuffer_free(buf, status)
        }
    }

    @Suppress("TooGenericExceptionThrown")
    fun asByteBuffer() =
        this.data?.getByteBuffer(0, this.len.toLong())?.also {
            it.order(ByteOrder.BIG_ENDIAN)
        }
}

/**
 * The equivalent of the `*mut RustBuffer` type.
 * Required for callbacks taking in an out pointer.
 *
 * Size is the sum of all values in the struct.
 */
class RustBufferByReference : ByReference(16) {
    /**
     * Set the pointed-to `RustBuffer` to the given value.
     */
    fun setValue(value: RustBuffer.ByValue) {
        // NOTE: The offsets are as they are in the C-like struct.
        val pointer = getPointer()
        pointer.setInt(0, value.capacity)
        pointer.setInt(4, value.len)
        pointer.setPointer(8, value.data)
    }

    /**
     * Get a `RustBuffer.ByValue` from this reference.
     */
    fun getValue(): RustBuffer.ByValue {
        val pointer = getPointer()
        val value = RustBuffer.ByValue()
        value.writeField("capacity", pointer.getInt(0))
        value.writeField("len", pointer.getInt(4))
        value.writeField("data", pointer.getPointer(8))

        return value
    }
}

// This is a helper for safely passing byte references into the rust code.
// It's not actually used at the moment, because there aren't many things that you
// can take a direct pointer to in the JVM, and if we're going to copy something
// then we might as well copy it into a `RustBuffer`. But it's here for API
// completeness.

@Structure.FieldOrder("len", "data")
open class ForeignBytes : Structure() {
    @JvmField var len: Int = 0
    @JvmField var data: Pointer? = null

    class ByValue : ForeignBytes(), Structure.ByValue
}
// The FfiConverter interface handles converter types to and from the FFI
//
// All implementing objects should be public to support external types.  When a
// type is external we need to import it's FfiConverter.
public interface FfiConverter<KotlinType, FfiType> {
    // Convert an FFI type to a Kotlin type
    fun lift(value: FfiType): KotlinType

    // Convert an Kotlin type to an FFI type
    fun lower(value: KotlinType): FfiType

    // Read a Kotlin type from a `ByteBuffer`
    fun read(buf: ByteBuffer): KotlinType

    // Calculate bytes to allocate when creating a `RustBuffer`
    //
    // This must return at least as many bytes as the write() function will
    // write. It can return more bytes than needed, for example when writing
    // Strings we can't know the exact bytes needed until we the UTF-8
    // encoding, so we pessimistically allocate the largest size possible (3
    // bytes per codepoint).  Allocating extra bytes is not really a big deal
    // because the `RustBuffer` is short-lived.
    fun allocationSize(value: KotlinType): Int

    // Write a Kotlin type to a `ByteBuffer`
    fun write(value: KotlinType, buf: ByteBuffer)

    // Lower a value into a `RustBuffer`
    //
    // This method lowers a value into a `RustBuffer` rather than the normal
    // FfiType.  It's used by the callback interface code.  Callback interface
    // returns are always serialized into a `RustBuffer` regardless of their
    // normal FFI type.
    fun lowerIntoRustBuffer(value: KotlinType): RustBuffer.ByValue {
        val rbuf = RustBuffer.alloc(allocationSize(value))
        try {
            val bbuf = rbuf.data!!.getByteBuffer(0, rbuf.capacity.toLong()).also {
                it.order(ByteOrder.BIG_ENDIAN)
            }
            write(value, bbuf)
            rbuf.writeField("len", bbuf.position())
            return rbuf
        } catch (e: Throwable) {
            RustBuffer.free(rbuf)
            throw e
        }
    }

    // Lift a value from a `RustBuffer`.
    //
    // This here mostly because of the symmetry with `lowerIntoRustBuffer()`.
    // It's currently only used by the `FfiConverterRustBuffer` class below.
    fun liftFromRustBuffer(rbuf: RustBuffer.ByValue): KotlinType {
        val byteBuf = rbuf.asByteBuffer()!!
        try {
           val item = read(byteBuf)
           if (byteBuf.hasRemaining()) {
               throw RuntimeException("junk remaining in buffer after lifting, something is very wrong!!")
           }
           return item
        } finally {
            RustBuffer.free(rbuf)
        }
    }
}

// FfiConverter that uses `RustBuffer` as the FfiType
public interface FfiConverterRustBuffer<KotlinType>: FfiConverter<KotlinType, RustBuffer.ByValue> {
    override fun lift(value: RustBuffer.ByValue) = liftFromRustBuffer(value)
    override fun lower(value: KotlinType) = lowerIntoRustBuffer(value)
}
// A handful of classes and functions to support the generated data structures.
// This would be a good candidate for isolating in its own ffi-support lib.
// Error runtime.
@Structure.FieldOrder("code", "error_buf")
internal open class RustCallStatus : Structure() {
    @JvmField var code: Byte = 0
    @JvmField var error_buf: RustBuffer.ByValue = RustBuffer.ByValue()

    class ByValue: RustCallStatus(), Structure.ByValue

    fun isSuccess(): Boolean {
        return code == 0.toByte()
    }

    fun isError(): Boolean {
        return code == 1.toByte()
    }

    fun isPanic(): Boolean {
        return code == 2.toByte()
    }
}

class InternalException(message: String) : Exception(message)

// Each top-level error class has a companion object that can lift the error from the call status's rust buffer
interface CallStatusErrorHandler<E> {
    fun lift(error_buf: RustBuffer.ByValue): E;
}

// Helpers for calling Rust
// In practice we usually need to be synchronized to call this safely, so it doesn't
// synchronize itself

// Call a rust function that returns a Result<>.  Pass in the Error class companion that corresponds to the Err
private inline fun <U, E: Exception> rustCallWithError(errorHandler: CallStatusErrorHandler<E>, callback: (RustCallStatus) -> U): U {
    var status = RustCallStatus();
    val return_value = callback(status)
    checkCallStatus(errorHandler, status)
    return return_value
}

// Check RustCallStatus and throw an error if the call wasn't successful
private fun<E: Exception> checkCallStatus(errorHandler: CallStatusErrorHandler<E>, status: RustCallStatus) {
    if (status.isSuccess()) {
        return
    } else if (status.isError()) {
        throw errorHandler.lift(status.error_buf)
    } else if (status.isPanic()) {
        // when the rust code sees a panic, it tries to construct a rustbuffer
        // with the message.  but if that code panics, then it just sends back
        // an empty buffer.
        if (status.error_buf.len > 0) {
            throw InternalException(FfiConverterString.lift(status.error_buf))
        } else {
            throw InternalException("Rust panic")
        }
    } else {
        throw InternalException("Unknown rust call status: $status.code")
    }
}

// CallStatusErrorHandler implementation for times when we don't expect a CALL_ERROR
object NullCallStatusErrorHandler: CallStatusErrorHandler<InternalException> {
    override fun lift(error_buf: RustBuffer.ByValue): InternalException {
        RustBuffer.free(error_buf)
        return InternalException("Unexpected CALL_ERROR")
    }
}

// Call a rust function that returns a plain value
private inline fun <U> rustCall(callback: (RustCallStatus) -> U): U {
    return rustCallWithError(NullCallStatusErrorHandler, callback);
}

// IntegerType that matches Rust's `usize` / C's `size_t`
public class USize(value: Long = 0) : IntegerType(Native.SIZE_T_SIZE, value, true) {
    // This is needed to fill in the gaps of IntegerType's implementation of Number for Kotlin.
    override fun toByte() = toInt().toByte()
    // Needed until https://youtrack.jetbrains.com/issue/KT-47902 is fixed.
    @Deprecated("`toInt().toChar()` is deprecated")
    override fun toChar() = toInt().toChar()
    override fun toShort() = toInt().toShort()

    fun writeToBuffer(buf: ByteBuffer) {
        // Make sure we always write usize integers using native byte-order, since they may be
        // casted to pointer values
        buf.order(ByteOrder.nativeOrder())
        try {
            when (Native.SIZE_T_SIZE) {
                4 -> buf.putInt(toInt())
                8 -> buf.putLong(toLong())
                else -> throw RuntimeException("Invalid SIZE_T_SIZE: ${Native.SIZE_T_SIZE}")
            }
        } finally {
            buf.order(ByteOrder.BIG_ENDIAN)
        }
    }

    companion object {
        val size: Int
            get() = Native.SIZE_T_SIZE

        fun readFromBuffer(buf: ByteBuffer) : USize {
            // Make sure we always read usize integers using native byte-order, since they may be
            // casted from pointer values
            buf.order(ByteOrder.nativeOrder())
            try {
                return when (Native.SIZE_T_SIZE) {
                    4 -> USize(buf.getInt().toLong())
                    8 -> USize(buf.getLong())
                    else -> throw RuntimeException("Invalid SIZE_T_SIZE: ${Native.SIZE_T_SIZE}")
                }
            } finally {
                buf.order(ByteOrder.BIG_ENDIAN)
            }
        }
    }
}


// Map handles to objects
//
// This is used when the Rust code expects an opaque pointer to represent some foreign object.
// Normally we would pass a pointer to the object, but JNA doesn't support getting a pointer from an
// object reference , nor does it support leaking a reference to Rust.
//
// Instead, this class maps USize values to objects so that we can pass a pointer-sized type to
// Rust when it needs an opaque pointer.
//
// TODO: refactor callbacks to use this class
internal class UniFfiHandleMap<T: Any> {
    private val map = ConcurrentHashMap<USize, T>()
    // Use AtomicInteger for our counter, since we may be on a 32-bit system.  4 billion possible
    // values seems like enough. If somehow we generate 4 billion handles, then this will wrap
    // around back to zero and we can assume the first handle generated will have been dropped by
    // then.
    private val counter = java.util.concurrent.atomic.AtomicInteger(0)

    val size: Int
        get() = map.size

    fun insert(obj: T): USize {
        val handle = USize(counter.getAndAdd(1).toLong())
        map.put(handle, obj)
        return handle
    }

    fun get(handle: USize): T? {
        return map.get(handle)
    }

    fun remove(handle: USize): T? {
        return map.remove(handle)
    }
}

// FFI type for Rust future continuations
internal interface UniFffiRustFutureContinuationCallbackType : com.sun.jna.Callback {
    fun callback(continuationHandle: USize, pollResult: Short);
}

// Contains loading, initialization code,
// and the FFI Function declarations in a com.sun.jna.Library.
@Synchronized
private fun findLibraryName(componentName: String): String {
    val libOverride = System.getProperty("uniffi.component.$componentName.libraryOverride")
    if (libOverride != null) {
        return libOverride
    }
    return "strathweb_phi_engine"
}

private inline fun <reified Lib : Library> loadIndirect(
    componentName: String
): Lib {
    return Native.load<Lib>(findLibraryName(componentName), Lib::class.java)
}

// A JNA Library to expose the extern-C FFI definitions.
// This is an implementation detail which will be called internally by the public API.

internal interface _UniFFILib : Library {
    companion object {
        internal val INSTANCE: _UniFFILib by lazy {
            loadIndirect<_UniFFILib>(componentName = "strathweb_phi_engine")
            .also { lib: _UniFFILib ->
                uniffiCheckContractApiVersion(lib)
                uniffiCheckApiChecksums(lib)
                FfiConverterTypePhiEventHandler.register(lib)
                }
        }
    }

    fun uniffi_strathweb_phi_engine_fn_free_boxedphieventhandler(`ptr`: Pointer,_uniffi_out_err: RustCallStatus, 
    ): Unit
    fun uniffi_strathweb_phi_engine_fn_constructor_boxedphieventhandler_new(`handler`: Long,_uniffi_out_err: RustCallStatus, 
    ): Pointer
    fun uniffi_strathweb_phi_engine_fn_free_inferenceoptionsbuilder(`ptr`: Pointer,_uniffi_out_err: RustCallStatus, 
    ): Unit
    fun uniffi_strathweb_phi_engine_fn_constructor_inferenceoptionsbuilder_new(_uniffi_out_err: RustCallStatus, 
    ): Pointer
    fun uniffi_strathweb_phi_engine_fn_method_inferenceoptionsbuilder_build(`ptr`: Pointer,_uniffi_out_err: RustCallStatus, 
    ): RustBuffer.ByValue
    fun uniffi_strathweb_phi_engine_fn_method_inferenceoptionsbuilder_with_repeat_last_n(`ptr`: Pointer,`repeatLastN`: Short,_uniffi_out_err: RustCallStatus, 
    ): Unit
    fun uniffi_strathweb_phi_engine_fn_method_inferenceoptionsbuilder_with_repeat_penalty(`ptr`: Pointer,`repeatPenalty`: Float,_uniffi_out_err: RustCallStatus, 
    ): Unit
    fun uniffi_strathweb_phi_engine_fn_method_inferenceoptionsbuilder_with_seed(`ptr`: Pointer,`seed`: Long,_uniffi_out_err: RustCallStatus, 
    ): Unit
    fun uniffi_strathweb_phi_engine_fn_method_inferenceoptionsbuilder_with_temperature(`ptr`: Pointer,`temperature`: Double,_uniffi_out_err: RustCallStatus, 
    ): Unit
    fun uniffi_strathweb_phi_engine_fn_method_inferenceoptionsbuilder_with_token_count(`ptr`: Pointer,`contextWindow`: Short,_uniffi_out_err: RustCallStatus, 
    ): Unit
    fun uniffi_strathweb_phi_engine_fn_method_inferenceoptionsbuilder_with_top_k(`ptr`: Pointer,`topK`: Long,_uniffi_out_err: RustCallStatus, 
    ): Unit
    fun uniffi_strathweb_phi_engine_fn_method_inferenceoptionsbuilder_with_top_p(`ptr`: Pointer,`topP`: Double,_uniffi_out_err: RustCallStatus, 
    ): Unit
    fun uniffi_strathweb_phi_engine_fn_free_phiengine(`ptr`: Pointer,_uniffi_out_err: RustCallStatus, 
    ): Unit
    fun uniffi_strathweb_phi_engine_fn_method_phiengine_run_inference(`ptr`: Pointer,`promptText`: RustBuffer.ByValue,`conversationContext`: RustBuffer.ByValue,`inferenceOptions`: RustBuffer.ByValue,_uniffi_out_err: RustCallStatus, 
    ): RustBuffer.ByValue
    fun uniffi_strathweb_phi_engine_fn_free_phienginebuilder(`ptr`: Pointer,_uniffi_out_err: RustCallStatus, 
    ): Unit
    fun uniffi_strathweb_phi_engine_fn_constructor_phienginebuilder_new(_uniffi_out_err: RustCallStatus, 
    ): Pointer
    fun uniffi_strathweb_phi_engine_fn_method_phienginebuilder_build(`ptr`: Pointer,`cacheDir`: RustBuffer.ByValue,_uniffi_out_err: RustCallStatus, 
    ): Pointer
    fun uniffi_strathweb_phi_engine_fn_method_phienginebuilder_build_stateful(`ptr`: Pointer,`cacheDir`: RustBuffer.ByValue,`systemInstruction`: RustBuffer.ByValue,_uniffi_out_err: RustCallStatus, 
    ): Pointer
    fun uniffi_strathweb_phi_engine_fn_method_phienginebuilder_try_use_gpu(`ptr`: Pointer,_uniffi_out_err: RustCallStatus, 
    ): Byte
    fun uniffi_strathweb_phi_engine_fn_method_phienginebuilder_with_context_window(`ptr`: Pointer,`contextWindow`: Short,_uniffi_out_err: RustCallStatus, 
    ): Unit
    fun uniffi_strathweb_phi_engine_fn_method_phienginebuilder_with_event_handler(`ptr`: Pointer,`eventHandler`: Pointer,_uniffi_out_err: RustCallStatus, 
    ): Unit
    fun uniffi_strathweb_phi_engine_fn_method_phienginebuilder_with_flash_attention(`ptr`: Pointer,`useFlashAttention`: Byte,_uniffi_out_err: RustCallStatus, 
    ): Unit
    fun uniffi_strathweb_phi_engine_fn_method_phienginebuilder_with_model_provider(`ptr`: Pointer,`modelProvider`: RustBuffer.ByValue,_uniffi_out_err: RustCallStatus, 
    ): Unit
    fun uniffi_strathweb_phi_engine_fn_method_phienginebuilder_with_tokenizer_provider(`ptr`: Pointer,`tokenizerProvider`: RustBuffer.ByValue,_uniffi_out_err: RustCallStatus, 
    ): Unit
    fun uniffi_strathweb_phi_engine_fn_free_statefulphiengine(`ptr`: Pointer,_uniffi_out_err: RustCallStatus, 
    ): Unit
    fun uniffi_strathweb_phi_engine_fn_method_statefulphiengine_clear_messsages(`ptr`: Pointer,_uniffi_out_err: RustCallStatus, 
    ): Unit
    fun uniffi_strathweb_phi_engine_fn_method_statefulphiengine_get_history(`ptr`: Pointer,_uniffi_out_err: RustCallStatus, 
    ): RustBuffer.ByValue
    fun uniffi_strathweb_phi_engine_fn_method_statefulphiengine_run_inference(`ptr`: Pointer,`promptText`: RustBuffer.ByValue,`inferenceOptions`: RustBuffer.ByValue,_uniffi_out_err: RustCallStatus, 
    ): RustBuffer.ByValue
    fun uniffi_strathweb_phi_engine_fn_init_callback_phieventhandler(`callbackStub`: ForeignCallback,_uniffi_out_err: RustCallStatus, 
    ): Unit
    fun uniffi_strathweb_phi_engine_fn_func_enable_tracing(_uniffi_out_err: RustCallStatus, 
    ): Unit
    fun ffi_strathweb_phi_engine_rustbuffer_alloc(`size`: Int,_uniffi_out_err: RustCallStatus, 
    ): RustBuffer.ByValue
    fun ffi_strathweb_phi_engine_rustbuffer_from_bytes(`bytes`: ForeignBytes.ByValue,_uniffi_out_err: RustCallStatus, 
    ): RustBuffer.ByValue
    fun ffi_strathweb_phi_engine_rustbuffer_free(`buf`: RustBuffer.ByValue,_uniffi_out_err: RustCallStatus, 
    ): Unit
    fun ffi_strathweb_phi_engine_rustbuffer_reserve(`buf`: RustBuffer.ByValue,`additional`: Int,_uniffi_out_err: RustCallStatus, 
    ): RustBuffer.ByValue
    fun ffi_strathweb_phi_engine_rust_future_continuation_callback_set(`callback`: UniFffiRustFutureContinuationCallbackType,
    ): Unit
    fun ffi_strathweb_phi_engine_rust_future_poll_u8(`handle`: Pointer,`uniffiCallback`: USize,
    ): Unit
    fun ffi_strathweb_phi_engine_rust_future_cancel_u8(`handle`: Pointer,
    ): Unit
    fun ffi_strathweb_phi_engine_rust_future_free_u8(`handle`: Pointer,
    ): Unit
    fun ffi_strathweb_phi_engine_rust_future_complete_u8(`handle`: Pointer,_uniffi_out_err: RustCallStatus, 
    ): Byte
    fun ffi_strathweb_phi_engine_rust_future_poll_i8(`handle`: Pointer,`uniffiCallback`: USize,
    ): Unit
    fun ffi_strathweb_phi_engine_rust_future_cancel_i8(`handle`: Pointer,
    ): Unit
    fun ffi_strathweb_phi_engine_rust_future_free_i8(`handle`: Pointer,
    ): Unit
    fun ffi_strathweb_phi_engine_rust_future_complete_i8(`handle`: Pointer,_uniffi_out_err: RustCallStatus, 
    ): Byte
    fun ffi_strathweb_phi_engine_rust_future_poll_u16(`handle`: Pointer,`uniffiCallback`: USize,
    ): Unit
    fun ffi_strathweb_phi_engine_rust_future_cancel_u16(`handle`: Pointer,
    ): Unit
    fun ffi_strathweb_phi_engine_rust_future_free_u16(`handle`: Pointer,
    ): Unit
    fun ffi_strathweb_phi_engine_rust_future_complete_u16(`handle`: Pointer,_uniffi_out_err: RustCallStatus, 
    ): Short
    fun ffi_strathweb_phi_engine_rust_future_poll_i16(`handle`: Pointer,`uniffiCallback`: USize,
    ): Unit
    fun ffi_strathweb_phi_engine_rust_future_cancel_i16(`handle`: Pointer,
    ): Unit
    fun ffi_strathweb_phi_engine_rust_future_free_i16(`handle`: Pointer,
    ): Unit
    fun ffi_strathweb_phi_engine_rust_future_complete_i16(`handle`: Pointer,_uniffi_out_err: RustCallStatus, 
    ): Short
    fun ffi_strathweb_phi_engine_rust_future_poll_u32(`handle`: Pointer,`uniffiCallback`: USize,
    ): Unit
    fun ffi_strathweb_phi_engine_rust_future_cancel_u32(`handle`: Pointer,
    ): Unit
    fun ffi_strathweb_phi_engine_rust_future_free_u32(`handle`: Pointer,
    ): Unit
    fun ffi_strathweb_phi_engine_rust_future_complete_u32(`handle`: Pointer,_uniffi_out_err: RustCallStatus, 
    ): Int
    fun ffi_strathweb_phi_engine_rust_future_poll_i32(`handle`: Pointer,`uniffiCallback`: USize,
    ): Unit
    fun ffi_strathweb_phi_engine_rust_future_cancel_i32(`handle`: Pointer,
    ): Unit
    fun ffi_strathweb_phi_engine_rust_future_free_i32(`handle`: Pointer,
    ): Unit
    fun ffi_strathweb_phi_engine_rust_future_complete_i32(`handle`: Pointer,_uniffi_out_err: RustCallStatus, 
    ): Int
    fun ffi_strathweb_phi_engine_rust_future_poll_u64(`handle`: Pointer,`uniffiCallback`: USize,
    ): Unit
    fun ffi_strathweb_phi_engine_rust_future_cancel_u64(`handle`: Pointer,
    ): Unit
    fun ffi_strathweb_phi_engine_rust_future_free_u64(`handle`: Pointer,
    ): Unit
    fun ffi_strathweb_phi_engine_rust_future_complete_u64(`handle`: Pointer,_uniffi_out_err: RustCallStatus, 
    ): Long
    fun ffi_strathweb_phi_engine_rust_future_poll_i64(`handle`: Pointer,`uniffiCallback`: USize,
    ): Unit
    fun ffi_strathweb_phi_engine_rust_future_cancel_i64(`handle`: Pointer,
    ): Unit
    fun ffi_strathweb_phi_engine_rust_future_free_i64(`handle`: Pointer,
    ): Unit
    fun ffi_strathweb_phi_engine_rust_future_complete_i64(`handle`: Pointer,_uniffi_out_err: RustCallStatus, 
    ): Long
    fun ffi_strathweb_phi_engine_rust_future_poll_f32(`handle`: Pointer,`uniffiCallback`: USize,
    ): Unit
    fun ffi_strathweb_phi_engine_rust_future_cancel_f32(`handle`: Pointer,
    ): Unit
    fun ffi_strathweb_phi_engine_rust_future_free_f32(`handle`: Pointer,
    ): Unit
    fun ffi_strathweb_phi_engine_rust_future_complete_f32(`handle`: Pointer,_uniffi_out_err: RustCallStatus, 
    ): Float
    fun ffi_strathweb_phi_engine_rust_future_poll_f64(`handle`: Pointer,`uniffiCallback`: USize,
    ): Unit
    fun ffi_strathweb_phi_engine_rust_future_cancel_f64(`handle`: Pointer,
    ): Unit
    fun ffi_strathweb_phi_engine_rust_future_free_f64(`handle`: Pointer,
    ): Unit
    fun ffi_strathweb_phi_engine_rust_future_complete_f64(`handle`: Pointer,_uniffi_out_err: RustCallStatus, 
    ): Double
    fun ffi_strathweb_phi_engine_rust_future_poll_pointer(`handle`: Pointer,`uniffiCallback`: USize,
    ): Unit
    fun ffi_strathweb_phi_engine_rust_future_cancel_pointer(`handle`: Pointer,
    ): Unit
    fun ffi_strathweb_phi_engine_rust_future_free_pointer(`handle`: Pointer,
    ): Unit
    fun ffi_strathweb_phi_engine_rust_future_complete_pointer(`handle`: Pointer,_uniffi_out_err: RustCallStatus, 
    ): Pointer
    fun ffi_strathweb_phi_engine_rust_future_poll_rust_buffer(`handle`: Pointer,`uniffiCallback`: USize,
    ): Unit
    fun ffi_strathweb_phi_engine_rust_future_cancel_rust_buffer(`handle`: Pointer,
    ): Unit
    fun ffi_strathweb_phi_engine_rust_future_free_rust_buffer(`handle`: Pointer,
    ): Unit
    fun ffi_strathweb_phi_engine_rust_future_complete_rust_buffer(`handle`: Pointer,_uniffi_out_err: RustCallStatus, 
    ): RustBuffer.ByValue
    fun ffi_strathweb_phi_engine_rust_future_poll_void(`handle`: Pointer,`uniffiCallback`: USize,
    ): Unit
    fun ffi_strathweb_phi_engine_rust_future_cancel_void(`handle`: Pointer,
    ): Unit
    fun ffi_strathweb_phi_engine_rust_future_free_void(`handle`: Pointer,
    ): Unit
    fun ffi_strathweb_phi_engine_rust_future_complete_void(`handle`: Pointer,_uniffi_out_err: RustCallStatus, 
    ): Unit
    fun uniffi_strathweb_phi_engine_checksum_func_enable_tracing(
    ): Short
    fun uniffi_strathweb_phi_engine_checksum_method_inferenceoptionsbuilder_build(
    ): Short
    fun uniffi_strathweb_phi_engine_checksum_method_inferenceoptionsbuilder_with_repeat_last_n(
    ): Short
    fun uniffi_strathweb_phi_engine_checksum_method_inferenceoptionsbuilder_with_repeat_penalty(
    ): Short
    fun uniffi_strathweb_phi_engine_checksum_method_inferenceoptionsbuilder_with_seed(
    ): Short
    fun uniffi_strathweb_phi_engine_checksum_method_inferenceoptionsbuilder_with_temperature(
    ): Short
    fun uniffi_strathweb_phi_engine_checksum_method_inferenceoptionsbuilder_with_token_count(
    ): Short
    fun uniffi_strathweb_phi_engine_checksum_method_inferenceoptionsbuilder_with_top_k(
    ): Short
    fun uniffi_strathweb_phi_engine_checksum_method_inferenceoptionsbuilder_with_top_p(
    ): Short
    fun uniffi_strathweb_phi_engine_checksum_method_phiengine_run_inference(
    ): Short
    fun uniffi_strathweb_phi_engine_checksum_method_phienginebuilder_build(
    ): Short
    fun uniffi_strathweb_phi_engine_checksum_method_phienginebuilder_build_stateful(
    ): Short
    fun uniffi_strathweb_phi_engine_checksum_method_phienginebuilder_try_use_gpu(
    ): Short
    fun uniffi_strathweb_phi_engine_checksum_method_phienginebuilder_with_context_window(
    ): Short
    fun uniffi_strathweb_phi_engine_checksum_method_phienginebuilder_with_event_handler(
    ): Short
    fun uniffi_strathweb_phi_engine_checksum_method_phienginebuilder_with_flash_attention(
    ): Short
    fun uniffi_strathweb_phi_engine_checksum_method_phienginebuilder_with_model_provider(
    ): Short
    fun uniffi_strathweb_phi_engine_checksum_method_phienginebuilder_with_tokenizer_provider(
    ): Short
    fun uniffi_strathweb_phi_engine_checksum_method_statefulphiengine_clear_messsages(
    ): Short
    fun uniffi_strathweb_phi_engine_checksum_method_statefulphiengine_get_history(
    ): Short
    fun uniffi_strathweb_phi_engine_checksum_method_statefulphiengine_run_inference(
    ): Short
    fun uniffi_strathweb_phi_engine_checksum_constructor_boxedphieventhandler_new(
    ): Short
    fun uniffi_strathweb_phi_engine_checksum_constructor_inferenceoptionsbuilder_new(
    ): Short
    fun uniffi_strathweb_phi_engine_checksum_constructor_phienginebuilder_new(
    ): Short
    fun uniffi_strathweb_phi_engine_checksum_method_phieventhandler_on_model_loaded(
    ): Short
    fun uniffi_strathweb_phi_engine_checksum_method_phieventhandler_on_inference_token(
    ): Short
    fun ffi_strathweb_phi_engine_uniffi_contract_version(
    ): Int
    
}

private fun uniffiCheckContractApiVersion(lib: _UniFFILib) {
    // Get the bindings contract version from our ComponentInterface
    val bindings_contract_version = 24
    // Get the scaffolding contract version by calling the into the dylib
    val scaffolding_contract_version = lib.ffi_strathweb_phi_engine_uniffi_contract_version()
    if (bindings_contract_version != scaffolding_contract_version) {
        throw RuntimeException("UniFFI contract version mismatch: try cleaning and rebuilding your project")
    }
}

@Suppress("UNUSED_PARAMETER")
private fun uniffiCheckApiChecksums(lib: _UniFFILib) {
    if (lib.uniffi_strathweb_phi_engine_checksum_func_enable_tracing() != 50910.toShort()) {
        throw RuntimeException("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    }
    if (lib.uniffi_strathweb_phi_engine_checksum_method_inferenceoptionsbuilder_build() != 28378.toShort()) {
        throw RuntimeException("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    }
    if (lib.uniffi_strathweb_phi_engine_checksum_method_inferenceoptionsbuilder_with_repeat_last_n() != 14246.toShort()) {
        throw RuntimeException("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    }
    if (lib.uniffi_strathweb_phi_engine_checksum_method_inferenceoptionsbuilder_with_repeat_penalty() != 54457.toShort()) {
        throw RuntimeException("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    }
    if (lib.uniffi_strathweb_phi_engine_checksum_method_inferenceoptionsbuilder_with_seed() != 12787.toShort()) {
        throw RuntimeException("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    }
    if (lib.uniffi_strathweb_phi_engine_checksum_method_inferenceoptionsbuilder_with_temperature() != 58616.toShort()) {
        throw RuntimeException("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    }
    if (lib.uniffi_strathweb_phi_engine_checksum_method_inferenceoptionsbuilder_with_token_count() != 29452.toShort()) {
        throw RuntimeException("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    }
    if (lib.uniffi_strathweb_phi_engine_checksum_method_inferenceoptionsbuilder_with_top_k() != 9530.toShort()) {
        throw RuntimeException("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    }
    if (lib.uniffi_strathweb_phi_engine_checksum_method_inferenceoptionsbuilder_with_top_p() != 13256.toShort()) {
        throw RuntimeException("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    }
    if (lib.uniffi_strathweb_phi_engine_checksum_method_phiengine_run_inference() != 39104.toShort()) {
        throw RuntimeException("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    }
    if (lib.uniffi_strathweb_phi_engine_checksum_method_phienginebuilder_build() != 43270.toShort()) {
        throw RuntimeException("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    }
    if (lib.uniffi_strathweb_phi_engine_checksum_method_phienginebuilder_build_stateful() != 3316.toShort()) {
        throw RuntimeException("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    }
    if (lib.uniffi_strathweb_phi_engine_checksum_method_phienginebuilder_try_use_gpu() != 35151.toShort()) {
        throw RuntimeException("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    }
    if (lib.uniffi_strathweb_phi_engine_checksum_method_phienginebuilder_with_context_window() != 63976.toShort()) {
        throw RuntimeException("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    }
    if (lib.uniffi_strathweb_phi_engine_checksum_method_phienginebuilder_with_event_handler() != 16167.toShort()) {
        throw RuntimeException("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    }
    if (lib.uniffi_strathweb_phi_engine_checksum_method_phienginebuilder_with_flash_attention() != 39059.toShort()) {
        throw RuntimeException("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    }
    if (lib.uniffi_strathweb_phi_engine_checksum_method_phienginebuilder_with_model_provider() != 52034.toShort()) {
        throw RuntimeException("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    }
    if (lib.uniffi_strathweb_phi_engine_checksum_method_phienginebuilder_with_tokenizer_provider() != 48882.toShort()) {
        throw RuntimeException("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    }
    if (lib.uniffi_strathweb_phi_engine_checksum_method_statefulphiengine_clear_messsages() != 56959.toShort()) {
        throw RuntimeException("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    }
    if (lib.uniffi_strathweb_phi_engine_checksum_method_statefulphiengine_get_history() != 14412.toShort()) {
        throw RuntimeException("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    }
    if (lib.uniffi_strathweb_phi_engine_checksum_method_statefulphiengine_run_inference() != 33058.toShort()) {
        throw RuntimeException("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    }
    if (lib.uniffi_strathweb_phi_engine_checksum_constructor_boxedphieventhandler_new() != 59537.toShort()) {
        throw RuntimeException("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    }
    if (lib.uniffi_strathweb_phi_engine_checksum_constructor_inferenceoptionsbuilder_new() != 17185.toShort()) {
        throw RuntimeException("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    }
    if (lib.uniffi_strathweb_phi_engine_checksum_constructor_phienginebuilder_new() != 57958.toShort()) {
        throw RuntimeException("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    }
    if (lib.uniffi_strathweb_phi_engine_checksum_method_phieventhandler_on_model_loaded() != 49339.toShort()) {
        throw RuntimeException("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    }
    if (lib.uniffi_strathweb_phi_engine_checksum_method_phieventhandler_on_inference_token() != 5088.toShort()) {
        throw RuntimeException("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    }
}

// Async support

// Public interface members begin here.


public object FfiConverterUShort: FfiConverter<UShort, Short> {
    override fun lift(value: Short): UShort {
        return value.toUShort()
    }

    override fun read(buf: ByteBuffer): UShort {
        return lift(buf.getShort())
    }

    override fun lower(value: UShort): Short {
        return value.toShort()
    }

    override fun allocationSize(value: UShort) = 2

    override fun write(value: UShort, buf: ByteBuffer) {
        buf.putShort(value.toShort())
    }
}

public object FfiConverterULong: FfiConverter<ULong, Long> {
    override fun lift(value: Long): ULong {
        return value.toULong()
    }

    override fun read(buf: ByteBuffer): ULong {
        return lift(buf.getLong())
    }

    override fun lower(value: ULong): Long {
        return value.toLong()
    }

    override fun allocationSize(value: ULong) = 8

    override fun write(value: ULong, buf: ByteBuffer) {
        buf.putLong(value.toLong())
    }
}

public object FfiConverterFloat: FfiConverter<Float, Float> {
    override fun lift(value: Float): Float {
        return value
    }

    override fun read(buf: ByteBuffer): Float {
        return buf.getFloat()
    }

    override fun lower(value: Float): Float {
        return value
    }

    override fun allocationSize(value: Float) = 4

    override fun write(value: Float, buf: ByteBuffer) {
        buf.putFloat(value)
    }
}

public object FfiConverterDouble: FfiConverter<Double, Double> {
    override fun lift(value: Double): Double {
        return value
    }

    override fun read(buf: ByteBuffer): Double {
        return buf.getDouble()
    }

    override fun lower(value: Double): Double {
        return value
    }

    override fun allocationSize(value: Double) = 8

    override fun write(value: Double, buf: ByteBuffer) {
        buf.putDouble(value)
    }
}

public object FfiConverterBoolean: FfiConverter<Boolean, Byte> {
    override fun lift(value: Byte): Boolean {
        return value.toInt() != 0
    }

    override fun read(buf: ByteBuffer): Boolean {
        return lift(buf.get())
    }

    override fun lower(value: Boolean): Byte {
        return if (value) 1.toByte() else 0.toByte()
    }

    override fun allocationSize(value: Boolean) = 1

    override fun write(value: Boolean, buf: ByteBuffer) {
        buf.put(lower(value))
    }
}

public object FfiConverterString: FfiConverter<String, RustBuffer.ByValue> {
    // Note: we don't inherit from FfiConverterRustBuffer, because we use a
    // special encoding when lowering/lifting.  We can use `RustBuffer.len` to
    // store our length and avoid writing it out to the buffer.
    override fun lift(value: RustBuffer.ByValue): String {
        try {
            val byteArr = ByteArray(value.len)
            value.asByteBuffer()!!.get(byteArr)
            return byteArr.toString(Charsets.UTF_8)
        } finally {
            RustBuffer.free(value)
        }
    }

    override fun read(buf: ByteBuffer): String {
        val len = buf.getInt()
        val byteArr = ByteArray(len)
        buf.get(byteArr)
        return byteArr.toString(Charsets.UTF_8)
    }

    fun toUtf8(value: String): ByteBuffer {
        // Make sure we don't have invalid UTF-16, check for lone surrogates.
        return Charsets.UTF_8.newEncoder().run {
            onMalformedInput(CodingErrorAction.REPORT)
            encode(CharBuffer.wrap(value))
        }
    }

    override fun lower(value: String): RustBuffer.ByValue {
        val byteBuf = toUtf8(value)
        // Ideally we'd pass these bytes to `ffi_bytebuffer_from_bytes`, but doing so would require us
        // to copy them into a JNA `Memory`. So we might as well directly copy them into a `RustBuffer`.
        val rbuf = RustBuffer.alloc(byteBuf.limit())
        rbuf.asByteBuffer()!!.put(byteBuf)
        return rbuf
    }

    // We aren't sure exactly how many bytes our string will be once it's UTF-8
    // encoded.  Allocate 3 bytes per UTF-16 code unit which will always be
    // enough.
    override fun allocationSize(value: String): Int {
        val sizeForLength = 4
        val sizeForString = value.length * 3
        return sizeForLength + sizeForString
    }

    override fun write(value: String, buf: ByteBuffer) {
        val byteBuf = toUtf8(value)
        buf.putInt(byteBuf.limit())
        buf.put(byteBuf)
    }
}


// Interface implemented by anything that can contain an object reference.
//
// Such types expose a `destroy()` method that must be called to cleanly
// dispose of the contained objects. Failure to call this method may result
// in memory leaks.
//
// The easiest way to ensure this method is called is to use the `.use`
// helper method to execute a block and destroy the object at the end.
interface Disposable {
    fun destroy()
    companion object {
        fun destroy(vararg args: Any?) {
            args.filterIsInstance<Disposable>()
                .forEach(Disposable::destroy)
        }
    }
}

inline fun <T : Disposable?, R> T.use(block: (T) -> R) =
    try {
        block(this)
    } finally {
        try {
            // N.B. our implementation is on the nullable type `Disposable?`.
            this?.destroy()
        } catch (e: Throwable) {
            // swallow
        }
    }

// The base class for all UniFFI Object types.
//
// This class provides core operations for working with the Rust `Arc<T>` pointer to
// the live Rust struct on the other side of the FFI.
//
// There's some subtlety here, because we have to be careful not to operate on a Rust
// struct after it has been dropped, and because we must expose a public API for freeing
// the Kotlin wrapper object in lieu of reliable finalizers. The core requirements are:
//
//   * Each `FFIObject` instance holds an opaque pointer to the underlying Rust struct.
//     Method calls need to read this pointer from the object's state and pass it in to
//     the Rust FFI.
//
//   * When an `FFIObject` is no longer needed, its pointer should be passed to a
//     special destructor function provided by the Rust FFI, which will drop the
//     underlying Rust struct.
//
//   * Given an `FFIObject` instance, calling code is expected to call the special
//     `destroy` method in order to free it after use, either by calling it explicitly
//     or by using a higher-level helper like the `use` method. Failing to do so will
//     leak the underlying Rust struct.
//
//   * We can't assume that calling code will do the right thing, and must be prepared
//     to handle Kotlin method calls executing concurrently with or even after a call to
//     `destroy`, and to handle multiple (possibly concurrent!) calls to `destroy`.
//
//   * We must never allow Rust code to operate on the underlying Rust struct after
//     the destructor has been called, and must never call the destructor more than once.
//     Doing so may trigger memory unsafety.
//
// If we try to implement this with mutual exclusion on access to the pointer, there is the
// possibility of a race between a method call and a concurrent call to `destroy`:
//
//    * Thread A starts a method call, reads the value of the pointer, but is interrupted
//      before it can pass the pointer over the FFI to Rust.
//    * Thread B calls `destroy` and frees the underlying Rust struct.
//    * Thread A resumes, passing the already-read pointer value to Rust and triggering
//      a use-after-free.
//
// One possible solution would be to use a `ReadWriteLock`, with each method call taking
// a read lock (and thus allowed to run concurrently) and the special `destroy` method
// taking a write lock (and thus blocking on live method calls). However, we aim not to
// generate methods with any hidden blocking semantics, and a `destroy` method that might
// block if called incorrectly seems to meet that bar.
//
// So, we achieve our goals by giving each `FFIObject` an associated `AtomicLong` counter to track
// the number of in-flight method calls, and an `AtomicBoolean` flag to indicate whether `destroy`
// has been called. These are updated according to the following rules:
//
//    * The initial value of the counter is 1, indicating a live object with no in-flight calls.
//      The initial value for the flag is false.
//
//    * At the start of each method call, we atomically check the counter.
//      If it is 0 then the underlying Rust struct has already been destroyed and the call is aborted.
//      If it is nonzero them we atomically increment it by 1 and proceed with the method call.
//
//    * At the end of each method call, we atomically decrement and check the counter.
//      If it has reached zero then we destroy the underlying Rust struct.
//
//    * When `destroy` is called, we atomically flip the flag from false to true.
//      If the flag was already true we silently fail.
//      Otherwise we atomically decrement and check the counter.
//      If it has reached zero then we destroy the underlying Rust struct.
//
// Astute readers may observe that this all sounds very similar to the way that Rust's `Arc<T>` works,
// and indeed it is, with the addition of a flag to guard against multiple calls to `destroy`.
//
// The overall effect is that the underlying Rust struct is destroyed only when `destroy` has been
// called *and* all in-flight method calls have completed, avoiding violating any of the expectations
// of the underlying Rust code.
//
// In the future we may be able to replace some of this with automatic finalization logic, such as using
// the new "Cleaner" functionaility in Java 9. The above scheme has been designed to work even if `destroy` is
// invoked by garbage-collection machinery rather than by calling code (which by the way, it's apparently also
// possible for the JVM to finalize an object while there is an in-flight call to one of its methods [1],
// so there would still be some complexity here).
//
// Sigh...all of this for want of a robust finalization mechanism.
//
// [1] https://stackoverflow.com/questions/24376768/can-java-finalize-an-object-when-it-is-still-in-scope/24380219
//
abstract class FFIObject(
    protected val pointer: Pointer
): Disposable, AutoCloseable {

    private val wasDestroyed = AtomicBoolean(false)
    private val callCounter = AtomicLong(1)

    open protected fun freeRustArcPtr() {
        // To be overridden in subclasses.
    }

    override fun destroy() {
        // Only allow a single call to this method.
        // TODO: maybe we should log a warning if called more than once?
        if (this.wasDestroyed.compareAndSet(false, true)) {
            // This decrement always matches the initial count of 1 given at creation time.
            if (this.callCounter.decrementAndGet() == 0L) {
                this.freeRustArcPtr()
            }
        }
    }

    @Synchronized
    override fun close() {
        this.destroy()
    }

    internal inline fun <R> callWithPointer(block: (ptr: Pointer) -> R): R {
        // Check and increment the call counter, to keep the object alive.
        // This needs a compare-and-set retry loop in case of concurrent updates.
        do {
            val c = this.callCounter.get()
            if (c == 0L) {
                throw IllegalStateException("${this.javaClass.simpleName} object has already been destroyed")
            }
            if (c == Long.MAX_VALUE) {
                throw IllegalStateException("${this.javaClass.simpleName} call counter would overflow")
            }
        } while (! this.callCounter.compareAndSet(c, c + 1L))
        // Now we can safely do the method call without the pointer being freed concurrently.
        try {
            return block(this.pointer)
        } finally {
            // This decrement always matches the increment we performed above.
            if (this.callCounter.decrementAndGet() == 0L) {
                this.freeRustArcPtr()
            }
        }
    }
}

public interface BoxedPhiEventHandlerInterface {
    
    companion object
}

class BoxedPhiEventHandler(
    pointer: Pointer
) : FFIObject(pointer), BoxedPhiEventHandlerInterface {
    constructor(`handler`: PhiEventHandler) :
        this(
    rustCall() { _status ->
    _UniFFILib.INSTANCE.uniffi_strathweb_phi_engine_fn_constructor_boxedphieventhandler_new(FfiConverterTypePhiEventHandler.lower(`handler`),_status)
})

    /**
     * Disconnect the object from the underlying Rust object.
     *
     * It can be called more than once, but once called, interacting with the object
     * causes an `IllegalStateException`.
     *
     * Clients **must** call this method once done with the object, or cause a memory leak.
     */
    override protected fun freeRustArcPtr() {
        rustCall() { status ->
            _UniFFILib.INSTANCE.uniffi_strathweb_phi_engine_fn_free_boxedphieventhandler(this.pointer, status)
        }
    }

    

    
    companion object
    
}

public object FfiConverterTypeBoxedPhiEventHandler: FfiConverter<BoxedPhiEventHandler, Pointer> {
    override fun lower(value: BoxedPhiEventHandler): Pointer = value.callWithPointer { it }

    override fun lift(value: Pointer): BoxedPhiEventHandler {
        return BoxedPhiEventHandler(value)
    }

    override fun read(buf: ByteBuffer): BoxedPhiEventHandler {
        // The Rust code always writes pointers as 8 bytes, and will
        // fail to compile if they don't fit.
        return lift(Pointer(buf.getLong()))
    }

    override fun allocationSize(value: BoxedPhiEventHandler) = 8

    override fun write(value: BoxedPhiEventHandler, buf: ByteBuffer) {
        // The Rust code always expects pointers written as 8 bytes,
        // and will fail to compile if they don't fit.
        buf.putLong(Pointer.nativeValue(lower(value)))
    }
}




public interface InferenceOptionsBuilderInterface {
    @Throws(PhiException::class)
    fun `build`(): InferenceOptions@Throws(PhiException::class)
    fun `withRepeatLastN`(`repeatLastN`: UShort)@Throws(PhiException::class)
    fun `withRepeatPenalty`(`repeatPenalty`: Float)@Throws(PhiException::class)
    fun `withSeed`(`seed`: ULong)@Throws(PhiException::class)
    fun `withTemperature`(`temperature`: Double)@Throws(PhiException::class)
    fun `withTokenCount`(`contextWindow`: UShort)@Throws(PhiException::class)
    fun `withTopK`(`topK`: ULong)@Throws(PhiException::class)
    fun `withTopP`(`topP`: Double)
    companion object
}

class InferenceOptionsBuilder(
    pointer: Pointer
) : FFIObject(pointer), InferenceOptionsBuilderInterface {
    constructor() :
        this(
    rustCall() { _status ->
    _UniFFILib.INSTANCE.uniffi_strathweb_phi_engine_fn_constructor_inferenceoptionsbuilder_new(_status)
})

    /**
     * Disconnect the object from the underlying Rust object.
     *
     * It can be called more than once, but once called, interacting with the object
     * causes an `IllegalStateException`.
     *
     * Clients **must** call this method once done with the object, or cause a memory leak.
     */
    override protected fun freeRustArcPtr() {
        rustCall() { status ->
            _UniFFILib.INSTANCE.uniffi_strathweb_phi_engine_fn_free_inferenceoptionsbuilder(this.pointer, status)
        }
    }

    
    @Throws(PhiException::class)override fun `build`(): InferenceOptions =
        callWithPointer {
    rustCallWithError(PhiException) { _status ->
    _UniFFILib.INSTANCE.uniffi_strathweb_phi_engine_fn_method_inferenceoptionsbuilder_build(it,
        
        _status)
}
        }.let {
            FfiConverterTypeInferenceOptions.lift(it)
        }
    
    
    @Throws(PhiException::class)override fun `withRepeatLastN`(`repeatLastN`: UShort) =
        callWithPointer {
    rustCallWithError(PhiException) { _status ->
    _UniFFILib.INSTANCE.uniffi_strathweb_phi_engine_fn_method_inferenceoptionsbuilder_with_repeat_last_n(it,
        FfiConverterUShort.lower(`repeatLastN`),
        _status)
}
        }
    
    
    
    @Throws(PhiException::class)override fun `withRepeatPenalty`(`repeatPenalty`: Float) =
        callWithPointer {
    rustCallWithError(PhiException) { _status ->
    _UniFFILib.INSTANCE.uniffi_strathweb_phi_engine_fn_method_inferenceoptionsbuilder_with_repeat_penalty(it,
        FfiConverterFloat.lower(`repeatPenalty`),
        _status)
}
        }
    
    
    
    @Throws(PhiException::class)override fun `withSeed`(`seed`: ULong) =
        callWithPointer {
    rustCallWithError(PhiException) { _status ->
    _UniFFILib.INSTANCE.uniffi_strathweb_phi_engine_fn_method_inferenceoptionsbuilder_with_seed(it,
        FfiConverterULong.lower(`seed`),
        _status)
}
        }
    
    
    
    @Throws(PhiException::class)override fun `withTemperature`(`temperature`: Double) =
        callWithPointer {
    rustCallWithError(PhiException) { _status ->
    _UniFFILib.INSTANCE.uniffi_strathweb_phi_engine_fn_method_inferenceoptionsbuilder_with_temperature(it,
        FfiConverterDouble.lower(`temperature`),
        _status)
}
        }
    
    
    
    @Throws(PhiException::class)override fun `withTokenCount`(`contextWindow`: UShort) =
        callWithPointer {
    rustCallWithError(PhiException) { _status ->
    _UniFFILib.INSTANCE.uniffi_strathweb_phi_engine_fn_method_inferenceoptionsbuilder_with_token_count(it,
        FfiConverterUShort.lower(`contextWindow`),
        _status)
}
        }
    
    
    
    @Throws(PhiException::class)override fun `withTopK`(`topK`: ULong) =
        callWithPointer {
    rustCallWithError(PhiException) { _status ->
    _UniFFILib.INSTANCE.uniffi_strathweb_phi_engine_fn_method_inferenceoptionsbuilder_with_top_k(it,
        FfiConverterULong.lower(`topK`),
        _status)
}
        }
    
    
    
    @Throws(PhiException::class)override fun `withTopP`(`topP`: Double) =
        callWithPointer {
    rustCallWithError(PhiException) { _status ->
    _UniFFILib.INSTANCE.uniffi_strathweb_phi_engine_fn_method_inferenceoptionsbuilder_with_top_p(it,
        FfiConverterDouble.lower(`topP`),
        _status)
}
        }
    
    
    

    
    companion object
    
}

public object FfiConverterTypeInferenceOptionsBuilder: FfiConverter<InferenceOptionsBuilder, Pointer> {
    override fun lower(value: InferenceOptionsBuilder): Pointer = value.callWithPointer { it }

    override fun lift(value: Pointer): InferenceOptionsBuilder {
        return InferenceOptionsBuilder(value)
    }

    override fun read(buf: ByteBuffer): InferenceOptionsBuilder {
        // The Rust code always writes pointers as 8 bytes, and will
        // fail to compile if they don't fit.
        return lift(Pointer(buf.getLong()))
    }

    override fun allocationSize(value: InferenceOptionsBuilder) = 8

    override fun write(value: InferenceOptionsBuilder, buf: ByteBuffer) {
        // The Rust code always expects pointers written as 8 bytes,
        // and will fail to compile if they don't fit.
        buf.putLong(Pointer.nativeValue(lower(value)))
    }
}




public interface PhiEngineInterface {
    @Throws(PhiException::class)
    fun `runInference`(`promptText`: String, `conversationContext`: ConversationContext, `inferenceOptions`: InferenceOptions): InferenceResult
    companion object
}

class PhiEngine(
    pointer: Pointer
) : FFIObject(pointer), PhiEngineInterface {

    /**
     * Disconnect the object from the underlying Rust object.
     *
     * It can be called more than once, but once called, interacting with the object
     * causes an `IllegalStateException`.
     *
     * Clients **must** call this method once done with the object, or cause a memory leak.
     */
    override protected fun freeRustArcPtr() {
        rustCall() { status ->
            _UniFFILib.INSTANCE.uniffi_strathweb_phi_engine_fn_free_phiengine(this.pointer, status)
        }
    }

    
    @Throws(PhiException::class)override fun `runInference`(`promptText`: String, `conversationContext`: ConversationContext, `inferenceOptions`: InferenceOptions): InferenceResult =
        callWithPointer {
    rustCallWithError(PhiException) { _status ->
    _UniFFILib.INSTANCE.uniffi_strathweb_phi_engine_fn_method_phiengine_run_inference(it,
        FfiConverterString.lower(`promptText`),FfiConverterTypeConversationContext.lower(`conversationContext`),FfiConverterTypeInferenceOptions.lower(`inferenceOptions`),
        _status)
}
        }.let {
            FfiConverterTypeInferenceResult.lift(it)
        }
    
    

    
    companion object
    
}

public object FfiConverterTypePhiEngine: FfiConverter<PhiEngine, Pointer> {
    override fun lower(value: PhiEngine): Pointer = value.callWithPointer { it }

    override fun lift(value: Pointer): PhiEngine {
        return PhiEngine(value)
    }

    override fun read(buf: ByteBuffer): PhiEngine {
        // The Rust code always writes pointers as 8 bytes, and will
        // fail to compile if they don't fit.
        return lift(Pointer(buf.getLong()))
    }

    override fun allocationSize(value: PhiEngine) = 8

    override fun write(value: PhiEngine, buf: ByteBuffer) {
        // The Rust code always expects pointers written as 8 bytes,
        // and will fail to compile if they don't fit.
        buf.putLong(Pointer.nativeValue(lower(value)))
    }
}




public interface PhiEngineBuilderInterface {
    @Throws(PhiException::class)
    fun `build`(`cacheDir`: String): PhiEngine@Throws(PhiException::class)
    fun `buildStateful`(`cacheDir`: String, `systemInstruction`: String?): StatefulPhiEngine@Throws(PhiException::class)
    fun `tryUseGpu`(): Boolean@Throws(PhiException::class)
    fun `withContextWindow`(`contextWindow`: UShort)@Throws(PhiException::class)
    fun `withEventHandler`(`eventHandler`: BoxedPhiEventHandler)@Throws(PhiException::class)
    fun `withFlashAttention`(`useFlashAttention`: Boolean)@Throws(PhiException::class)
    fun `withModelProvider`(`modelProvider`: PhiModelProvider)@Throws(PhiException::class)
    fun `withTokenizerProvider`(`tokenizerProvider`: TokenizerProvider)
    companion object
}

class PhiEngineBuilder(
    pointer: Pointer
) : FFIObject(pointer), PhiEngineBuilderInterface {
    constructor() :
        this(
    rustCall() { _status ->
    _UniFFILib.INSTANCE.uniffi_strathweb_phi_engine_fn_constructor_phienginebuilder_new(_status)
})

    /**
     * Disconnect the object from the underlying Rust object.
     *
     * It can be called more than once, but once called, interacting with the object
     * causes an `IllegalStateException`.
     *
     * Clients **must** call this method once done with the object, or cause a memory leak.
     */
    override protected fun freeRustArcPtr() {
        rustCall() { status ->
            _UniFFILib.INSTANCE.uniffi_strathweb_phi_engine_fn_free_phienginebuilder(this.pointer, status)
        }
    }

    
    @Throws(PhiException::class)override fun `build`(`cacheDir`: String): PhiEngine =
        callWithPointer {
    rustCallWithError(PhiException) { _status ->
    _UniFFILib.INSTANCE.uniffi_strathweb_phi_engine_fn_method_phienginebuilder_build(it,
        FfiConverterString.lower(`cacheDir`),
        _status)
}
        }.let {
            FfiConverterTypePhiEngine.lift(it)
        }
    
    
    @Throws(PhiException::class)override fun `buildStateful`(`cacheDir`: String, `systemInstruction`: String?): StatefulPhiEngine =
        callWithPointer {
    rustCallWithError(PhiException) { _status ->
    _UniFFILib.INSTANCE.uniffi_strathweb_phi_engine_fn_method_phienginebuilder_build_stateful(it,
        FfiConverterString.lower(`cacheDir`),FfiConverterOptionalString.lower(`systemInstruction`),
        _status)
}
        }.let {
            FfiConverterTypeStatefulPhiEngine.lift(it)
        }
    
    
    @Throws(PhiException::class)override fun `tryUseGpu`(): Boolean =
        callWithPointer {
    rustCallWithError(PhiException) { _status ->
    _UniFFILib.INSTANCE.uniffi_strathweb_phi_engine_fn_method_phienginebuilder_try_use_gpu(it,
        
        _status)
}
        }.let {
            FfiConverterBoolean.lift(it)
        }
    
    
    @Throws(PhiException::class)override fun `withContextWindow`(`contextWindow`: UShort) =
        callWithPointer {
    rustCallWithError(PhiException) { _status ->
    _UniFFILib.INSTANCE.uniffi_strathweb_phi_engine_fn_method_phienginebuilder_with_context_window(it,
        FfiConverterUShort.lower(`contextWindow`),
        _status)
}
        }
    
    
    
    @Throws(PhiException::class)override fun `withEventHandler`(`eventHandler`: BoxedPhiEventHandler) =
        callWithPointer {
    rustCallWithError(PhiException) { _status ->
    _UniFFILib.INSTANCE.uniffi_strathweb_phi_engine_fn_method_phienginebuilder_with_event_handler(it,
        FfiConverterTypeBoxedPhiEventHandler.lower(`eventHandler`),
        _status)
}
        }
    
    
    
    @Throws(PhiException::class)override fun `withFlashAttention`(`useFlashAttention`: Boolean) =
        callWithPointer {
    rustCallWithError(PhiException) { _status ->
    _UniFFILib.INSTANCE.uniffi_strathweb_phi_engine_fn_method_phienginebuilder_with_flash_attention(it,
        FfiConverterBoolean.lower(`useFlashAttention`),
        _status)
}
        }
    
    
    
    @Throws(PhiException::class)override fun `withModelProvider`(`modelProvider`: PhiModelProvider) =
        callWithPointer {
    rustCallWithError(PhiException) { _status ->
    _UniFFILib.INSTANCE.uniffi_strathweb_phi_engine_fn_method_phienginebuilder_with_model_provider(it,
        FfiConverterTypePhiModelProvider.lower(`modelProvider`),
        _status)
}
        }
    
    
    
    @Throws(PhiException::class)override fun `withTokenizerProvider`(`tokenizerProvider`: TokenizerProvider) =
        callWithPointer {
    rustCallWithError(PhiException) { _status ->
    _UniFFILib.INSTANCE.uniffi_strathweb_phi_engine_fn_method_phienginebuilder_with_tokenizer_provider(it,
        FfiConverterTypeTokenizerProvider.lower(`tokenizerProvider`),
        _status)
}
        }
    
    
    

    
    companion object
    
}

public object FfiConverterTypePhiEngineBuilder: FfiConverter<PhiEngineBuilder, Pointer> {
    override fun lower(value: PhiEngineBuilder): Pointer = value.callWithPointer { it }

    override fun lift(value: Pointer): PhiEngineBuilder {
        return PhiEngineBuilder(value)
    }

    override fun read(buf: ByteBuffer): PhiEngineBuilder {
        // The Rust code always writes pointers as 8 bytes, and will
        // fail to compile if they don't fit.
        return lift(Pointer(buf.getLong()))
    }

    override fun allocationSize(value: PhiEngineBuilder) = 8

    override fun write(value: PhiEngineBuilder, buf: ByteBuffer) {
        // The Rust code always expects pointers written as 8 bytes,
        // and will fail to compile if they don't fit.
        buf.putLong(Pointer.nativeValue(lower(value)))
    }
}




public interface StatefulPhiEngineInterface {
    @Throws(PhiException::class)
    fun `clearMesssages`()@Throws(PhiException::class)
    fun `getHistory`(): List<ConversationMessage>@Throws(PhiException::class)
    fun `runInference`(`promptText`: String, `inferenceOptions`: InferenceOptions): InferenceResult
    companion object
}

class StatefulPhiEngine(
    pointer: Pointer
) : FFIObject(pointer), StatefulPhiEngineInterface {

    /**
     * Disconnect the object from the underlying Rust object.
     *
     * It can be called more than once, but once called, interacting with the object
     * causes an `IllegalStateException`.
     *
     * Clients **must** call this method once done with the object, or cause a memory leak.
     */
    override protected fun freeRustArcPtr() {
        rustCall() { status ->
            _UniFFILib.INSTANCE.uniffi_strathweb_phi_engine_fn_free_statefulphiengine(this.pointer, status)
        }
    }

    
    @Throws(PhiException::class)override fun `clearMesssages`() =
        callWithPointer {
    rustCallWithError(PhiException) { _status ->
    _UniFFILib.INSTANCE.uniffi_strathweb_phi_engine_fn_method_statefulphiengine_clear_messsages(it,
        
        _status)
}
        }
    
    
    
    @Throws(PhiException::class)override fun `getHistory`(): List<ConversationMessage> =
        callWithPointer {
    rustCallWithError(PhiException) { _status ->
    _UniFFILib.INSTANCE.uniffi_strathweb_phi_engine_fn_method_statefulphiengine_get_history(it,
        
        _status)
}
        }.let {
            FfiConverterSequenceTypeConversationMessage.lift(it)
        }
    
    
    @Throws(PhiException::class)override fun `runInference`(`promptText`: String, `inferenceOptions`: InferenceOptions): InferenceResult =
        callWithPointer {
    rustCallWithError(PhiException) { _status ->
    _UniFFILib.INSTANCE.uniffi_strathweb_phi_engine_fn_method_statefulphiengine_run_inference(it,
        FfiConverterString.lower(`promptText`),FfiConverterTypeInferenceOptions.lower(`inferenceOptions`),
        _status)
}
        }.let {
            FfiConverterTypeInferenceResult.lift(it)
        }
    
    

    
    companion object
    
}

public object FfiConverterTypeStatefulPhiEngine: FfiConverter<StatefulPhiEngine, Pointer> {
    override fun lower(value: StatefulPhiEngine): Pointer = value.callWithPointer { it }

    override fun lift(value: Pointer): StatefulPhiEngine {
        return StatefulPhiEngine(value)
    }

    override fun read(buf: ByteBuffer): StatefulPhiEngine {
        // The Rust code always writes pointers as 8 bytes, and will
        // fail to compile if they don't fit.
        return lift(Pointer(buf.getLong()))
    }

    override fun allocationSize(value: StatefulPhiEngine) = 8

    override fun write(value: StatefulPhiEngine, buf: ByteBuffer) {
        // The Rust code always expects pointers written as 8 bytes,
        // and will fail to compile if they don't fit.
        buf.putLong(Pointer.nativeValue(lower(value)))
    }
}




data class ConversationContext (
    var `messages`: List<ConversationMessage>, 
    var `systemInstruction`: String?
) {
    
    companion object
}

public object FfiConverterTypeConversationContext: FfiConverterRustBuffer<ConversationContext> {
    override fun read(buf: ByteBuffer): ConversationContext {
        return ConversationContext(
            FfiConverterSequenceTypeConversationMessage.read(buf),
            FfiConverterOptionalString.read(buf),
        )
    }

    override fun allocationSize(value: ConversationContext) = (
            FfiConverterSequenceTypeConversationMessage.allocationSize(value.`messages`) +
            FfiConverterOptionalString.allocationSize(value.`systemInstruction`)
    )

    override fun write(value: ConversationContext, buf: ByteBuffer) {
            FfiConverterSequenceTypeConversationMessage.write(value.`messages`, buf)
            FfiConverterOptionalString.write(value.`systemInstruction`, buf)
    }
}




data class ConversationMessage (
    var `role`: Role, 
    var `text`: String
) {
    
    companion object
}

public object FfiConverterTypeConversationMessage: FfiConverterRustBuffer<ConversationMessage> {
    override fun read(buf: ByteBuffer): ConversationMessage {
        return ConversationMessage(
            FfiConverterTypeRole.read(buf),
            FfiConverterString.read(buf),
        )
    }

    override fun allocationSize(value: ConversationMessage) = (
            FfiConverterTypeRole.allocationSize(value.`role`) +
            FfiConverterString.allocationSize(value.`text`)
    )

    override fun write(value: ConversationMessage, buf: ByteBuffer) {
            FfiConverterTypeRole.write(value.`role`, buf)
            FfiConverterString.write(value.`text`, buf)
    }
}




data class InferenceOptions (
    var `tokenCount`: UShort, 
    var `temperature`: Double, 
    var `topP`: Double?, 
    var `topK`: ULong?, 
    var `repeatPenalty`: Float, 
    var `repeatLastN`: UShort, 
    var `seed`: ULong
) {
    
    companion object
}

public object FfiConverterTypeInferenceOptions: FfiConverterRustBuffer<InferenceOptions> {
    override fun read(buf: ByteBuffer): InferenceOptions {
        return InferenceOptions(
            FfiConverterUShort.read(buf),
            FfiConverterDouble.read(buf),
            FfiConverterOptionalDouble.read(buf),
            FfiConverterOptionalULong.read(buf),
            FfiConverterFloat.read(buf),
            FfiConverterUShort.read(buf),
            FfiConverterULong.read(buf),
        )
    }

    override fun allocationSize(value: InferenceOptions) = (
            FfiConverterUShort.allocationSize(value.`tokenCount`) +
            FfiConverterDouble.allocationSize(value.`temperature`) +
            FfiConverterOptionalDouble.allocationSize(value.`topP`) +
            FfiConverterOptionalULong.allocationSize(value.`topK`) +
            FfiConverterFloat.allocationSize(value.`repeatPenalty`) +
            FfiConverterUShort.allocationSize(value.`repeatLastN`) +
            FfiConverterULong.allocationSize(value.`seed`)
    )

    override fun write(value: InferenceOptions, buf: ByteBuffer) {
            FfiConverterUShort.write(value.`tokenCount`, buf)
            FfiConverterDouble.write(value.`temperature`, buf)
            FfiConverterOptionalDouble.write(value.`topP`, buf)
            FfiConverterOptionalULong.write(value.`topK`, buf)
            FfiConverterFloat.write(value.`repeatPenalty`, buf)
            FfiConverterUShort.write(value.`repeatLastN`, buf)
            FfiConverterULong.write(value.`seed`, buf)
    }
}




data class InferenceResult (
    var `resultText`: String, 
    var `tokenCount`: UShort, 
    var `duration`: Double, 
    var `tokensPerSecond`: Double
) {
    
    companion object
}

public object FfiConverterTypeInferenceResult: FfiConverterRustBuffer<InferenceResult> {
    override fun read(buf: ByteBuffer): InferenceResult {
        return InferenceResult(
            FfiConverterString.read(buf),
            FfiConverterUShort.read(buf),
            FfiConverterDouble.read(buf),
            FfiConverterDouble.read(buf),
        )
    }

    override fun allocationSize(value: InferenceResult) = (
            FfiConverterString.allocationSize(value.`resultText`) +
            FfiConverterUShort.allocationSize(value.`tokenCount`) +
            FfiConverterDouble.allocationSize(value.`duration`) +
            FfiConverterDouble.allocationSize(value.`tokensPerSecond`)
    )

    override fun write(value: InferenceResult, buf: ByteBuffer) {
            FfiConverterString.write(value.`resultText`, buf)
            FfiConverterUShort.write(value.`tokenCount`, buf)
            FfiConverterDouble.write(value.`duration`, buf)
            FfiConverterDouble.write(value.`tokensPerSecond`, buf)
    }
}





sealed class PhiException: Exception() {
    // Each variant is a nested class
    
    class InitalizationException(
        val `errorText`: String
        ) : PhiException() {
        override val message
            get() = "errorText=${ `errorText` }"
    }
    
    class LockingException(
        val `errorText`: String
        ) : PhiException() {
        override val message
            get() = "errorText=${ `errorText` }"
    }
    
    class InferenceException(
        val `errorText`: String
        ) : PhiException() {
        override val message
            get() = "errorText=${ `errorText` }"
    }
    
    class GpuNotSupported(
        ) : PhiException() {
        override val message
            get() = ""
    }
    

    companion object ErrorHandler : CallStatusErrorHandler<PhiException> {
        override fun lift(error_buf: RustBuffer.ByValue): PhiException = FfiConverterTypePhiError.lift(error_buf)
    }

    
}

public object FfiConverterTypePhiError : FfiConverterRustBuffer<PhiException> {
    override fun read(buf: ByteBuffer): PhiException {
        

        return when(buf.getInt()) {
            1 -> PhiException.InitalizationException(
                FfiConverterString.read(buf),
                )
            2 -> PhiException.LockingException(
                FfiConverterString.read(buf),
                )
            3 -> PhiException.InferenceException(
                FfiConverterString.read(buf),
                )
            4 -> PhiException.GpuNotSupported()
            else -> throw RuntimeException("invalid error enum value, something is very wrong!!")
        }
    }

    override fun allocationSize(value: PhiException): Int {
        return when(value) {
            is PhiException.InitalizationException -> (
                // Add the size for the Int that specifies the variant plus the size needed for all fields
                4
                + FfiConverterString.allocationSize(value.`errorText`)
            )
            is PhiException.LockingException -> (
                // Add the size for the Int that specifies the variant plus the size needed for all fields
                4
                + FfiConverterString.allocationSize(value.`errorText`)
            )
            is PhiException.InferenceException -> (
                // Add the size for the Int that specifies the variant plus the size needed for all fields
                4
                + FfiConverterString.allocationSize(value.`errorText`)
            )
            is PhiException.GpuNotSupported -> (
                // Add the size for the Int that specifies the variant plus the size needed for all fields
                4
            )
        }
    }

    override fun write(value: PhiException, buf: ByteBuffer) {
        when(value) {
            is PhiException.InitalizationException -> {
                buf.putInt(1)
                FfiConverterString.write(value.`errorText`, buf)
                Unit
            }
            is PhiException.LockingException -> {
                buf.putInt(2)
                FfiConverterString.write(value.`errorText`, buf)
                Unit
            }
            is PhiException.InferenceException -> {
                buf.putInt(3)
                FfiConverterString.write(value.`errorText`, buf)
                Unit
            }
            is PhiException.GpuNotSupported -> {
                buf.putInt(4)
                Unit
            }
        }.let { /* this makes the `when` an expression, which ensures it is exhaustive */ }
    }

}




sealed class PhiModelProvider {
    data class HuggingFace(
        val `modelRepo`: String, 
        val `modelFileName`: String, 
        val `modelRevision`: String
        ) : PhiModelProvider() {
        companion object
    }
    data class FileSystem(
        val `modelPath`: String
        ) : PhiModelProvider() {
        companion object
    }
    

    
    companion object
}

public object FfiConverterTypePhiModelProvider : FfiConverterRustBuffer<PhiModelProvider>{
    override fun read(buf: ByteBuffer): PhiModelProvider {
        return when(buf.getInt()) {
            1 -> PhiModelProvider.HuggingFace(
                FfiConverterString.read(buf),
                FfiConverterString.read(buf),
                FfiConverterString.read(buf),
                )
            2 -> PhiModelProvider.FileSystem(
                FfiConverterString.read(buf),
                )
            else -> throw RuntimeException("invalid enum value, something is very wrong!!")
        }
    }

    override fun allocationSize(value: PhiModelProvider) = when(value) {
        is PhiModelProvider.HuggingFace -> {
            // Add the size for the Int that specifies the variant plus the size needed for all fields
            (
                4
                + FfiConverterString.allocationSize(value.`modelRepo`)
                + FfiConverterString.allocationSize(value.`modelFileName`)
                + FfiConverterString.allocationSize(value.`modelRevision`)
            )
        }
        is PhiModelProvider.FileSystem -> {
            // Add the size for the Int that specifies the variant plus the size needed for all fields
            (
                4
                + FfiConverterString.allocationSize(value.`modelPath`)
            )
        }
    }

    override fun write(value: PhiModelProvider, buf: ByteBuffer) {
        when(value) {
            is PhiModelProvider.HuggingFace -> {
                buf.putInt(1)
                FfiConverterString.write(value.`modelRepo`, buf)
                FfiConverterString.write(value.`modelFileName`, buf)
                FfiConverterString.write(value.`modelRevision`, buf)
                Unit
            }
            is PhiModelProvider.FileSystem -> {
                buf.putInt(2)
                FfiConverterString.write(value.`modelPath`, buf)
                Unit
            }
        }.let { /* this makes the `when` an expression, which ensures it is exhaustive */ }
    }
}






enum class Role {
    ASSISTANT,USER;
    companion object
}

public object FfiConverterTypeRole: FfiConverterRustBuffer<Role> {
    override fun read(buf: ByteBuffer) = try {
        Role.values()[buf.getInt() - 1]
    } catch (e: IndexOutOfBoundsException) {
        throw RuntimeException("invalid enum value, something is very wrong!!", e)
    }

    override fun allocationSize(value: Role) = 4

    override fun write(value: Role, buf: ByteBuffer) {
        buf.putInt(value.ordinal + 1)
    }
}






sealed class TokenizerProvider {
    data class HuggingFace(
        val `tokenizerRepo`: String, 
        val `tokenizerFileName`: String
        ) : TokenizerProvider() {
        companion object
    }
    data class FileSystem(
        val `tokenizerPath`: String
        ) : TokenizerProvider() {
        companion object
    }
    

    
    companion object
}

public object FfiConverterTypeTokenizerProvider : FfiConverterRustBuffer<TokenizerProvider>{
    override fun read(buf: ByteBuffer): TokenizerProvider {
        return when(buf.getInt()) {
            1 -> TokenizerProvider.HuggingFace(
                FfiConverterString.read(buf),
                FfiConverterString.read(buf),
                )
            2 -> TokenizerProvider.FileSystem(
                FfiConverterString.read(buf),
                )
            else -> throw RuntimeException("invalid enum value, something is very wrong!!")
        }
    }

    override fun allocationSize(value: TokenizerProvider) = when(value) {
        is TokenizerProvider.HuggingFace -> {
            // Add the size for the Int that specifies the variant plus the size needed for all fields
            (
                4
                + FfiConverterString.allocationSize(value.`tokenizerRepo`)
                + FfiConverterString.allocationSize(value.`tokenizerFileName`)
            )
        }
        is TokenizerProvider.FileSystem -> {
            // Add the size for the Int that specifies the variant plus the size needed for all fields
            (
                4
                + FfiConverterString.allocationSize(value.`tokenizerPath`)
            )
        }
    }

    override fun write(value: TokenizerProvider, buf: ByteBuffer) {
        when(value) {
            is TokenizerProvider.HuggingFace -> {
                buf.putInt(1)
                FfiConverterString.write(value.`tokenizerRepo`, buf)
                FfiConverterString.write(value.`tokenizerFileName`, buf)
                Unit
            }
            is TokenizerProvider.FileSystem -> {
                buf.putInt(2)
                FfiConverterString.write(value.`tokenizerPath`, buf)
                Unit
            }
        }.let { /* this makes the `when` an expression, which ensures it is exhaustive */ }
    }
}






internal typealias Handle = Long
internal class ConcurrentHandleMap<T>(
    private val leftMap: MutableMap<Handle, T> = mutableMapOf(),
    private val rightMap: MutableMap<T, Handle> = mutableMapOf()
) {
    private val lock = java.util.concurrent.locks.ReentrantLock()
    private val currentHandle = AtomicLong(0L)
    private val stride = 1L

    fun insert(obj: T): Handle =
        lock.withLock {
            rightMap[obj] ?:
                currentHandle.getAndAdd(stride)
                    .also { handle ->
                        leftMap[handle] = obj
                        rightMap[obj] = handle
                    }
            }

    fun get(handle: Handle) = lock.withLock {
        leftMap[handle]
    }

    fun delete(handle: Handle) {
        this.remove(handle)
    }

    fun remove(handle: Handle): T? =
        lock.withLock {
            leftMap.remove(handle)?.let { obj ->
                rightMap.remove(obj)
                obj
            }
        }
}

interface ForeignCallback : com.sun.jna.Callback {
    public fun callback(handle: Handle, method: Int, argsData: Pointer, argsLen: Int, outBuf: RustBufferByReference): Int
}

// Magic number for the Rust proxy to call using the same mechanism as every other method,
// to free the callback once it's dropped by Rust.
internal const val IDX_CALLBACK_FREE = 0
// Callback return codes
internal const val UNIFFI_CALLBACK_SUCCESS = 0
internal const val UNIFFI_CALLBACK_ERROR = 1
internal const val UNIFFI_CALLBACK_UNEXPECTED_ERROR = 2

public abstract class FfiConverterCallbackInterface<CallbackInterface>(
    protected val foreignCallback: ForeignCallback
): FfiConverter<CallbackInterface, Handle> {
    private val handleMap = ConcurrentHandleMap<CallbackInterface>()

    // Registers the foreign callback with the Rust side.
    // This method is generated for each callback interface.
    internal abstract fun register(lib: _UniFFILib)

    fun drop(handle: Handle): RustBuffer.ByValue {
        return handleMap.remove(handle).let { RustBuffer.ByValue() }
    }

    override fun lift(value: Handle): CallbackInterface {
        return handleMap.get(value) ?: throw InternalException("No callback in handlemap; this is a Uniffi bug")
    }

    override fun read(buf: ByteBuffer) = lift(buf.getLong())

    override fun lower(value: CallbackInterface) =
        handleMap.insert(value).also {
            assert(handleMap.get(it) === value) { "Handle map is not returning the object we just placed there. This is a bug in the HandleMap." }
        }

    override fun allocationSize(value: CallbackInterface) = 8

    override fun write(value: CallbackInterface, buf: ByteBuffer) {
        buf.putLong(lower(value))
    }
}

// Declaration and FfiConverters for PhiEventHandler Callback Interface

public interface PhiEventHandler {
    fun `onModelLoaded`()
    fun `onInferenceToken`(`token`: String)
    
    companion object
}

// The ForeignCallback that is passed to Rust.
internal class ForeignCallbackTypePhiEventHandler : ForeignCallback {
    @Suppress("TooGenericExceptionCaught")
    override fun callback(handle: Handle, method: Int, argsData: Pointer, argsLen: Int, outBuf: RustBufferByReference): Int {
        val cb = FfiConverterTypePhiEventHandler.lift(handle)
        return when (method) {
            IDX_CALLBACK_FREE -> {
                FfiConverterTypePhiEventHandler.drop(handle)
                // Successful return
                // See docs of ForeignCallback in `uniffi_core/src/ffi/foreigncallbacks.rs`
                UNIFFI_CALLBACK_SUCCESS
            }
            1 -> {
                // Call the method, write to outBuf and return a status code
                // See docs of ForeignCallback in `uniffi_core/src/ffi/foreigncallbacks.rs` for info
                try {
                    this.`invokeOnModelLoaded`(cb, argsData, argsLen, outBuf)
                } catch (e: Throwable) {
                    // Unexpected error
                    try {
                        // Try to serialize the error into a string
                        outBuf.setValue(FfiConverterString.lower(e.toString()))
                    } catch (e: Throwable) {
                        // If that fails, then it's time to give up and just return
                    }
                    UNIFFI_CALLBACK_UNEXPECTED_ERROR
                }
            }
            2 -> {
                // Call the method, write to outBuf and return a status code
                // See docs of ForeignCallback in `uniffi_core/src/ffi/foreigncallbacks.rs` for info
                try {
                    this.`invokeOnInferenceToken`(cb, argsData, argsLen, outBuf)
                } catch (e: Throwable) {
                    // Unexpected error
                    try {
                        // Try to serialize the error into a string
                        outBuf.setValue(FfiConverterString.lower(e.toString()))
                    } catch (e: Throwable) {
                        // If that fails, then it's time to give up and just return
                    }
                    UNIFFI_CALLBACK_UNEXPECTED_ERROR
                }
            }
            
            else -> {
                // An unexpected error happened.
                // See docs of ForeignCallback in `uniffi_core/src/ffi/foreigncallbacks.rs`
                try {
                    // Try to serialize the error into a string
                    outBuf.setValue(FfiConverterString.lower("Invalid Callback index"))
                } catch (e: Throwable) {
                    // If that fails, then it's time to give up and just return
                }
                UNIFFI_CALLBACK_UNEXPECTED_ERROR
            }
        }
    }

    
    @Suppress("UNUSED_PARAMETER")
    private fun `invokeOnModelLoaded`(kotlinCallbackInterface: PhiEventHandler, argsData: Pointer, argsLen: Int, outBuf: RustBufferByReference): Int {
        fun makeCall() : Int {
            kotlinCallbackInterface.`onModelLoaded`(
            )
            return UNIFFI_CALLBACK_SUCCESS
        }
        fun makeCallAndHandleError()  : Int = try {
            makeCall()
        } catch (e: PhiException) {
            // Expected error, serialize it into outBuf
            outBuf.setValue(FfiConverterTypePhiError.lowerIntoRustBuffer(e))
            UNIFFI_CALLBACK_ERROR
        }

        return makeCallAndHandleError()
    }
    
    @Suppress("UNUSED_PARAMETER")
    private fun `invokeOnInferenceToken`(kotlinCallbackInterface: PhiEventHandler, argsData: Pointer, argsLen: Int, outBuf: RustBufferByReference): Int {
        val argsBuf = argsData.getByteBuffer(0, argsLen.toLong()).also {
            it.order(ByteOrder.BIG_ENDIAN)
        }
        fun makeCall() : Int {
            kotlinCallbackInterface.`onInferenceToken`(
                FfiConverterString.read(argsBuf)
            )
            return UNIFFI_CALLBACK_SUCCESS
        }
        fun makeCallAndHandleError()  : Int = try {
            makeCall()
        } catch (e: PhiException) {
            // Expected error, serialize it into outBuf
            outBuf.setValue(FfiConverterTypePhiError.lowerIntoRustBuffer(e))
            UNIFFI_CALLBACK_ERROR
        }

        return makeCallAndHandleError()
    }
    
}

// The ffiConverter which transforms the Callbacks in to Handles to pass to Rust.
public object FfiConverterTypePhiEventHandler: FfiConverterCallbackInterface<PhiEventHandler>(
    foreignCallback = ForeignCallbackTypePhiEventHandler()
) {
    override fun register(lib: _UniFFILib) {
        rustCall() { status ->
            lib.uniffi_strathweb_phi_engine_fn_init_callback_phieventhandler(this.foreignCallback, status)
        }
    }
}




public object FfiConverterOptionalULong: FfiConverterRustBuffer<ULong?> {
    override fun read(buf: ByteBuffer): ULong? {
        if (buf.get().toInt() == 0) {
            return null
        }
        return FfiConverterULong.read(buf)
    }

    override fun allocationSize(value: ULong?): Int {
        if (value == null) {
            return 1
        } else {
            return 1 + FfiConverterULong.allocationSize(value)
        }
    }

    override fun write(value: ULong?, buf: ByteBuffer) {
        if (value == null) {
            buf.put(0)
        } else {
            buf.put(1)
            FfiConverterULong.write(value, buf)
        }
    }
}




public object FfiConverterOptionalDouble: FfiConverterRustBuffer<Double?> {
    override fun read(buf: ByteBuffer): Double? {
        if (buf.get().toInt() == 0) {
            return null
        }
        return FfiConverterDouble.read(buf)
    }

    override fun allocationSize(value: Double?): Int {
        if (value == null) {
            return 1
        } else {
            return 1 + FfiConverterDouble.allocationSize(value)
        }
    }

    override fun write(value: Double?, buf: ByteBuffer) {
        if (value == null) {
            buf.put(0)
        } else {
            buf.put(1)
            FfiConverterDouble.write(value, buf)
        }
    }
}




public object FfiConverterOptionalString: FfiConverterRustBuffer<String?> {
    override fun read(buf: ByteBuffer): String? {
        if (buf.get().toInt() == 0) {
            return null
        }
        return FfiConverterString.read(buf)
    }

    override fun allocationSize(value: String?): Int {
        if (value == null) {
            return 1
        } else {
            return 1 + FfiConverterString.allocationSize(value)
        }
    }

    override fun write(value: String?, buf: ByteBuffer) {
        if (value == null) {
            buf.put(0)
        } else {
            buf.put(1)
            FfiConverterString.write(value, buf)
        }
    }
}




public object FfiConverterSequenceTypeConversationMessage: FfiConverterRustBuffer<List<ConversationMessage>> {
    override fun read(buf: ByteBuffer): List<ConversationMessage> {
        val len = buf.getInt()
        return List<ConversationMessage>(len) {
            FfiConverterTypeConversationMessage.read(buf)
        }
    }

    override fun allocationSize(value: List<ConversationMessage>): Int {
        val sizeForLength = 4
        val sizeForItems = value.map { FfiConverterTypeConversationMessage.allocationSize(it) }.sum()
        return sizeForLength + sizeForItems
    }

    override fun write(value: List<ConversationMessage>, buf: ByteBuffer) {
        buf.putInt(value.size)
        value.forEach {
            FfiConverterTypeConversationMessage.write(it, buf)
        }
    }
}

fun `enableTracing`() =
    
    rustCall() { _status ->
    _UniFFILib.INSTANCE.uniffi_strathweb_phi_engine_fn_func_enable_tracing(_status)
}



